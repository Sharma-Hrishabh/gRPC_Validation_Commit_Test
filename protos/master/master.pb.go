// Code generated by protoc-gen-go. DO NOT EDIT.
// source: master/master.proto

package master

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ValidationResponse_ReturnType int32

const (
	ValidationResponse_SUCCESS ValidationResponse_ReturnType = 0
	ValidationResponse_FAILURE ValidationResponse_ReturnType = 1
)

var ValidationResponse_ReturnType_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var ValidationResponse_ReturnType_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x ValidationResponse_ReturnType) String() string {
	return proto.EnumName(ValidationResponse_ReturnType_name, int32(x))
}

func (ValidationResponse_ReturnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e524a825add940c, []int{1, 0}
}

type CommitResponse_ReturnType int32

const (
	CommitResponse_SUCCESS CommitResponse_ReturnType = 0
	CommitResponse_FAILURE CommitResponse_ReturnType = 1
)

var CommitResponse_ReturnType_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var CommitResponse_ReturnType_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x CommitResponse_ReturnType) String() string {
	return proto.EnumName(CommitResponse_ReturnType_name, int32(x))
}

func (CommitResponse_ReturnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e524a825add940c, []int{2, 0}
}

// msg describing the request for validating the message
type ValidationRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidationRequest) Reset()         { *m = ValidationRequest{} }
func (m *ValidationRequest) String() string { return proto.CompactTextString(m) }
func (*ValidationRequest) ProtoMessage()    {}
func (*ValidationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e524a825add940c, []int{0}
}

func (m *ValidationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidationRequest.Unmarshal(m, b)
}
func (m *ValidationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidationRequest.Marshal(b, m, deterministic)
}
func (m *ValidationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationRequest.Merge(m, src)
}
func (m *ValidationRequest) XXX_Size() int {
	return xxx_messageInfo_ValidationRequest.Size(m)
}
func (m *ValidationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationRequest proto.InternalMessageInfo

func (m *ValidationRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ValidationRequest) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// msg describing whether the validation request was successfully accepted
type ValidationResponse struct {
	Msg         string                        `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId       int64                         `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ReturnValue ValidationResponse_ReturnType `protobuf:"varint,3,opt,name=return_value,json=returnValue,proto3,enum=master.ValidationResponse_ReturnType" json:"return_value,omitempty"`
	// cryptographic signature
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidationResponse) Reset()         { *m = ValidationResponse{} }
func (m *ValidationResponse) String() string { return proto.CompactTextString(m) }
func (*ValidationResponse) ProtoMessage()    {}
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e524a825add940c, []int{1}
}

func (m *ValidationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidationResponse.Unmarshal(m, b)
}
func (m *ValidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidationResponse.Marshal(b, m, deterministic)
}
func (m *ValidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationResponse.Merge(m, src)
}
func (m *ValidationResponse) XXX_Size() int {
	return xxx_messageInfo_ValidationResponse.Size(m)
}
func (m *ValidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationResponse proto.InternalMessageInfo

func (m *ValidationResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ValidationResponse) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *ValidationResponse) GetReturnValue() ValidationResponse_ReturnType {
	if m != nil {
		return m.ReturnValue
	}
	return ValidationResponse_SUCCESS
}

func (m *ValidationResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// msg describing whether the message was successfully committed
type CommitResponse struct {
	ReturnValue          CommitResponse_ReturnType `protobuf:"varint,1,opt,name=return_value,json=returnValue,proto3,enum=master.CommitResponse_ReturnType" json:"return_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e524a825add940c, []int{2}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetReturnValue() CommitResponse_ReturnType {
	if m != nil {
		return m.ReturnValue
	}
	return CommitResponse_SUCCESS
}

func init() {
	proto.RegisterEnum("master.ValidationResponse_ReturnType", ValidationResponse_ReturnType_name, ValidationResponse_ReturnType_value)
	proto.RegisterEnum("master.CommitResponse_ReturnType", CommitResponse_ReturnType_name, CommitResponse_ReturnType_value)
	proto.RegisterType((*ValidationRequest)(nil), "master.ValidationRequest")
	proto.RegisterType((*ValidationResponse)(nil), "master.ValidationResponse")
	proto.RegisterType((*CommitResponse)(nil), "master.CommitResponse")
}

func init() { proto.RegisterFile("master/master.proto", fileDescriptor_3e524a825add940c) }

var fileDescriptor_3e524a825add940c = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4f, 0x83, 0x30,
	0x14, 0xc7, 0xad, 0x28, 0x66, 0x6f, 0x73, 0xc1, 0xfa, 0x23, 0x48, 0x3c, 0x20, 0x89, 0x86, 0x13,
	0x4b, 0xf0, 0xea, 0x45, 0x71, 0x8b, 0x4b, 0xf4, 0x52, 0xb6, 0x1d, 0xbc, 0x2c, 0x5d, 0x68, 0x08,
	0xc9, 0x0a, 0x48, 0x8b, 0x89, 0x17, 0xff, 0x43, 0xff, 0x27, 0x43, 0x99, 0xa2, 0x73, 0x5b, 0x76,
	0x6a, 0x5f, 0xfb, 0xbe, 0xaf, 0x9f, 0xef, 0xeb, 0x83, 0x63, 0x4e, 0x85, 0x64, 0x45, 0xaf, 0x5e,
	0xbc, 0xbc, 0xc8, 0x64, 0x86, 0xf5, 0x3a, 0x72, 0x6e, 0xe1, 0x68, 0x42, 0xe7, 0x49, 0x44, 0x65,
	0x92, 0xa5, 0x84, 0xbd, 0x96, 0x4c, 0x48, 0x6c, 0x80, 0xc6, 0x45, 0x6c, 0x22, 0x1b, 0xb9, 0x2d,
	0x52, 0x6d, 0xf1, 0x29, 0xe8, 0x5c, 0xc4, 0xd3, 0x24, 0x32, 0x77, 0x6d, 0xe4, 0x6a, 0x64, 0x9f,
	0x8b, 0x78, 0x18, 0x39, 0x9f, 0x08, 0xf0, 0x6f, 0xb9, 0xc8, 0xb3, 0x54, 0xb0, 0xad, 0xf5, 0xf8,
	0x11, 0x3a, 0x05, 0x93, 0x65, 0x91, 0x4e, 0xdf, 0xe8, 0xbc, 0x64, 0xa6, 0x66, 0x23, 0xb7, 0xeb,
	0x5f, 0x79, 0x0b, 0xd4, 0xff, 0xa5, 0x3d, 0xa2, 0xd2, 0x47, 0xef, 0x39, 0x23, 0xed, 0x5a, 0x3a,
	0xa9, 0x94, 0xf8, 0x02, 0x5a, 0x22, 0x89, 0x53, 0x2a, 0xcb, 0x82, 0x99, 0x7b, 0x36, 0x72, 0x3b,
	0xa4, 0x39, 0x70, 0xae, 0x01, 0x1a, 0x21, 0x6e, 0xc3, 0x41, 0x38, 0x0e, 0x82, 0x7e, 0x18, 0x1a,
	0x3b, 0x55, 0x30, 0xb8, 0x1b, 0x3e, 0x8d, 0x49, 0xdf, 0x40, 0xce, 0x07, 0x74, 0x83, 0x8c, 0xf3,
	0x44, 0xfe, 0x58, 0x79, 0x58, 0x22, 0x44, 0x8a, 0xf0, 0xf2, 0x9b, 0xf0, 0x6f, 0xf6, 0x3a, 0xba,
	0x6d, 0xdf, 0xf7, 0x47, 0x00, 0x8d, 0x67, 0x3c, 0x80, 0xc3, 0xb0, 0x9c, 0xa9, 0xfa, 0xf5, 0xbf,
	0x9c, 0xaf, 0x6a, 0x8c, 0xba, 0xb2, 0xac, 0xf5, 0x3d, 0xf3, 0x9f, 0x41, 0xaf, 0x39, 0x71, 0xb0,
	0x5c, 0x71, 0x83, 0xcc, 0x3a, 0x5b, 0x6d, 0xf2, 0xfe, 0xe4, 0x05, 0x47, 0x94, 0x46, 0x3d, 0x35,
	0x48, 0x62, 0x31, 0x56, 0x33, 0x5d, 0x85, 0x37, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x82, 0x2b,
	0xe2, 0x8c, 0x6e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ValidationClient is the client API for Validation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidationClient interface {
	SubmitRequest(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
}

type validationClient struct {
	cc *grpc.ClientConn
}

func NewValidationClient(cc *grpc.ClientConn) ValidationClient {
	return &validationClient{cc}
}

func (c *validationClient) SubmitRequest(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, "/master.Validation/SubmitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationServer is the server API for Validation service.
type ValidationServer interface {
	SubmitRequest(context.Context, *ValidationRequest) (*ValidationResponse, error)
}

// UnimplementedValidationServer can be embedded to have forward compatible implementations.
type UnimplementedValidationServer struct {
}

func (*UnimplementedValidationServer) SubmitRequest(ctx context.Context, req *ValidationRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRequest not implemented")
}

func RegisterValidationServer(s *grpc.Server, srv ValidationServer) {
	s.RegisterService(&_Validation_serviceDesc, srv)
}

func _Validation_SubmitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServer).SubmitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Validation/SubmitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServer).SubmitRequest(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Validation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "master.Validation",
	HandlerType: (*ValidationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRequest",
			Handler:    _Validation_SubmitRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master/master.proto",
}

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitClient interface {
	SubmitRequest(ctx context.Context, in *ValidationResponse, opts ...grpc.CallOption) (*CommitResponse, error)
}

type commitClient struct {
	cc *grpc.ClientConn
}

func NewCommitClient(cc *grpc.ClientConn) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) SubmitRequest(ctx context.Context, in *ValidationResponse, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/master.Commit/SubmitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
type CommitServer interface {
	SubmitRequest(context.Context, *ValidationResponse) (*CommitResponse, error)
}

// UnimplementedCommitServer can be embedded to have forward compatible implementations.
type UnimplementedCommitServer struct {
}

func (*UnimplementedCommitServer) SubmitRequest(ctx context.Context, req *ValidationResponse) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRequest not implemented")
}

func RegisterCommitServer(s *grpc.Server, srv CommitServer) {
	s.RegisterService(&_Commit_serviceDesc, srv)
}

func _Commit_SubmitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).SubmitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Commit/SubmitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).SubmitRequest(ctx, req.(*ValidationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "master.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitRequest",
			Handler:    _Commit_SubmitRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master/master.proto",
}
